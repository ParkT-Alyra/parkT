{"version":3,"sources":["getWeb3.js","Navbar.jsx","pages/Layout.jsx","pages/Home.jsx","pages/RegisterParking.jsx","pages/Parkings.jsx","pages/NoPage.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Navbar","to","Layout","Home","RegisterParking","props","registerParking","price","postalCode","coordX","coordY","deposite","className","ref","type","onClick","ParkingItem","bookParking","uniqId","priceBySecond","deposit","coordinate","x","y","id","value","parseInt","Parkings","parkings","useState","searchedPostalCode","setSearchedPostalCode","parkingsFoundByPostalCode","setParkingsFoundByPostalCode","useEffect","results","filter","parking","ParkingItems","map","key","placeholder","onChange","event","target","NoPage","App","state","storageValue","accounts","accountBalance","contract","componentDidMount","eth","getAccounts","getBalance","weiRawBalance","utils","fromWei","net","getId","networkId","deployedNetwork","ParkT","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","fetchParkings","call","send","from","events","ParkingBooked","on","subscriptionId","this","path","element","index","parkingId","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e55e0fa.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Navbar() {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <Link to=\"/parkT/\">Home</Link>\n        </li>\n        <li>\n          <Link to=\"/parkT/parkings\">Rechercher un parking</Link>\n        </li>\n        <li>\n          <Link to=\"/parkT/register-parking\">Enregistrer votre parking</Link>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React from \"react\";\nimport {Outlet} from \"react-router-dom\";\nimport Navbar from \"../Navbar\";\n\nconst Layout = () => {\n  return (\n    <>\n      <Navbar />\n      <Outlet />\n    </>\n  );\n};\n\nexport default Layout;","import React from 'react';\n\nfunction Home() {\n    return (\n        <h1>Optimisez vos revenus tout en préservant la planète c'est possible avec parkT</h1>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nfunction RegisterParking(props) {\n    const {registerParking, price, postalCode, coordX, coordY, deposite } = props;\n    return (\n        <div className=\"registerParking\">\n            <h1>Un parking ? Enregistrez-vous !</h1>\n            <h3>Tarif</h3>\n            <input ref={price} type=\"text\" />\n            <h3>Code Postal</h3>\n            <input ref={postalCode} type=\"text\" />\n            <h3>Coordonnées Lat</h3>\n            <input ref={coordX} type=\"text\" />\n            <h3>Coordonnées Long</h3>\n            <input ref={coordY} type=\"text\" />\n            <h3>Caution demandée</h3>\n            <input ref={deposite} type=\"text\" />\n            <br/>\n            <br/>\n            <button onClick={registerParking}>Enregistrer votre Parking</button>\n        </div>\n    );\n}\n\nexport default RegisterParking;\n","import React, {useEffect, useState} from 'react';\n\nfunction ParkingItem(props) {\n    const {bookParking} = props;\n\n    return (\n        <tr>\n            <td>{props.uniqId}</td>\n            <td>{props.postalCode}</td>\n            <td>{props.priceBySecond}</td>\n            <td>{props.deposit}</td>\n            <td>{props.coordinate.x} - {props.coordinate.y}</td>\n            <td>\n                 <button id={props.uniqId} value={parseInt(props.priceBySecond)*24*60*60+parseInt(props.deposit)} onClick={bookParking}>Réserver le Parking</button>\n            </td>\n        </tr>\n    );\n}\n\nfunction Parkings(props) {\n    const {parkings, bookParking} = props;\n    const [searchedPostalCode, setSearchedPostalCode] = useState(\"\");\n    const [parkingsFoundByPostalCode, setParkingsFoundByPostalCode] = useState([]);\n    const handleChange = event => {\n        setSearchedPostalCode(event.target.value);\n    }\n    useEffect(() => {\n        const results = parkings.filter(parking => parking['postalCode'] === searchedPostalCode);\n        setParkingsFoundByPostalCode(results);\n      }, [searchedPostalCode]);\n    const ParkingItems = parkingsFoundByPostalCode.map((parking) =>\n        <ParkingItem key={parking.id}\n            uniqId={parking.id}\n            postalCode={parking.postalCode}\n            priceBySecond={parking.priceBySecond}\n            deposit={parking.deposit}\n            coordinate={parking.coordinate}\n            bookParking={bookParking}\n        />\n    );\n\n    return (\n        <div className=\"Parkings\">\n        <h1>Recherchez une place en entrant un code postal</h1>\n        <label>Trouvez des places de parking</label>\n        <input type=\"text\" placeholder=\"code postal\" value={searchedPostalCode} onChange={handleChange}/>\n        <div className=\"box\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Code postal</th>\n                        <th>Prix</th>\n                        <th>Caution</th>\n                        <th>Position GPS (map)</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {ParkingItems}\n                </tbody>\n            </table>\n        </div>\n    </div>\n    )\n}\n\nexport default Parkings;\n","import React from 'react';\n\nfunction NoPage() {\n    return (\n        <h1>404 </h1>\n    );\n}\n\nexport default NoPage;","import React, { Component } from \"react\";\nimport ParkT from \"./contracts/ParkT.json\";\nimport getWeb3 from \"./getWeb3\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Layout from \"./pages/Layout\";\nimport Home from \"./pages/Home\";\nimport RegisterParking from \"./pages/RegisterParking\";\nimport Parkings from \"./pages/Parkings\";\nimport NoPage from \"./pages/NoPage\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, accountBalance: null, contract: null, parkings: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      const weiRawBalance = await web3.eth.getBalance(accounts[0]);\n\n      const accountBalance = await web3.utils.fromWei(weiRawBalance, 'ether');\n\n      // Get the contract instance.\n      //This is not a 100% accurate guess as any private network could use testnet and mainnet genesis blocks and network IDs.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = ParkT.networks[networkId];\n      const instance = new web3.eth.Contract(\n        ParkT.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, accountBalance, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  }\n\n  runInit = async () => {\n    const { contract } = this.state;\n\n    const parkings = await contract.methods.fetchParkings().call();\n\n    // Update state with the result.\n    this.setState({ parkings });\n  }\n\n  registerParking = async () => {\n    const { contract, accounts } = this.state;\n\n    await contract.methods.registerParking(this.price.value, this.deposite.value, this.postalCode.value, {x: this.coordX.value, y:this.coordY.value }).send({ from: accounts[0] });\n  }\n\n  bookParking = async (event) => {\n    const { contract, accounts } = this.state;\n\n    await contract.methods.bookParking(event.target.id).send({ from: accounts[0], value: event.target.value });\n    await contract.events.ParkingBooked({})\n      .on(\"connected\", function(subscriptionId){ console.log(subscriptionId);})\n      .on('data', function(event){ console.log(event);})\n  }\n\n  render() {\n    const { parkings, accounts, accountBalance } = this.state;\n\n    if (!this.state.web3 || !parkings) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/parkT/\" element={<Layout />}>\n              <Route index element={<Home />} />\n              <Route path=\"register-parking\"\n                element={<RegisterParking\n                  coordY={(coordY) => this.coordY = coordY}\n                  coordX={(coordX) => this.coordX = coordX}\n                  price={(price) => this.price = price}\n                  deposite={(deposite) => this.deposite = deposite}\n                  postalCode={(postalCode) => this.postalCode = postalCode}\n                  registerParking={this.registerParking}\n                />} />\n              <Route path=\"parkings\"\n                element={<Parkings\n                  parkings={parkings}\n                  parkingId={(parkingId) => this.parkingId = parkingId}\n                  bookParking={this.bookParking}\n                />} />\n              <Route path=\"*\" element={<NoPage />} />\n            </Route>\n          </Routes>\n        </BrowserRouter>\n        Bonjour, Vous êtes connecté avec l'adresse : {accounts[0]}\n        <br/>\n        Vous disposez de {accountBalance} ETH\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}